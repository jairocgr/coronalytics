
require 'open-uri'
require 'csv'

class IngestSragFileJob < ApplicationJob
  queue_as :default

  def perform(srag)
    tmpfile = download(srag)
    begin
      CSV.foreach(tmpfile.path, headers: true, col_sep: ";") do |row|
        next unless row['CLASSI_FIN'].to_i = 5
        SragRecord.create! {
          srag: srag,
          dt_notific:  Date.strptime(Date.strptime(row["DT_NOTIFIC"], '%d/%m/%Y'), '%d/%m/%Y'),
          sem_not:  row["SEM_NOT"],
          dt_sin_pri:  Date.strptime(Date.strptime(row["DT_SIN_PRI"], '%d/%m/%Y'), '%d/%m/%Y'),
          sem_pri:  row["SEM_PRI"],
          sg_uf_not:  row["SG_UF_NOT"],
          id_regiona:  row["ID_REGIONA"],
          co_regiona:  row["CO_REGIONA"],
          id_municip:  row["ID_MUNICIP"],
          co_mun_not:  row["CO_MUN_NOT"],
          id_unidade:  row["ID_UNIDADE"],
          co_uni_not:  row["CO_UNI_NOT"],
          cs_sexo:  row["CS_SEXO"],
          dt_nasc:  Date.strptime(row["DT_NASC"], '%d/%m/%Y'),
          nu_idade_n:  row["NU_IDADE_N"].to_i,
          tp_idade:  row["TP_IDADE"],
          cod_idade:  row["COD_IDADE"],
          cs_gestant:  row["CS_GESTANT"],
          cs_raca:  row["CS_RACA"],
          cs_escol_n:  row["CS_ESCOL_N"],
          id_pais:  row["ID_PAIS"],
          co_pais:  row["CO_PAIS"],
          sg_uf:  row["SG_UF"],
          id_rg_resi:  row["ID_RG_RESI"],
          co_rg_resi:  row["CO_RG_RESI"],
          id_mn_resi:  row["ID_MN_RESI"],
          co_mun_res:  row["CO_MUN_RES"],
          cs_zona:  row["CS_ZONA"],
          surto_sg:  row["SURTO_SG"],
          nosocomial:  row["NOSOCOMIAL"],
          ave_suino:  row["AVE_SUINO"],
          febre:  row["FEBRE"],
          tosse:  row["TOSSE"],
          garganta:  row["GARGANTA"],
          dispneia:  row["DISPNEIA"],
          desc_resp:  row["DESC_RESP"],
          saturacao:  row["SATURACAO"],
          diarreia:  row["DIARREIA"],
          vomito:  row["VOMITO"],
          outro_sin:  row["OUTRO_SIN"],
          outro_des:  row["OUTRO_DES"],
          puerpera:  row["PUERPERA"],
          fator_risc:  row["FATOR_RISC"],
          cardiopati:  row["CARDIOPATI"],
          hematologi:  row["HEMATOLOGI"],
          sind_down:  row["SIND_DOWN"],
          hepatica:  row["HEPATICA"],
          asma:  row["ASMA"],
          diabetes:  row["DIABETES"],
          neurologic:  row["NEUROLOGIC"],
          pneumopati:  row["PNEUMOPATI"],
          imunodepre:  row["IMUNODEPRE"],
          renal:  row["RENAL"],
          obesidade:  row["OBESIDADE"],
          obes_imc:  row["OBES_IMC"],
          out_morbi:  row["OUT_MORBI"],
          morb_desc:  row["MORB_DESC"],
          vacina:  row["VACINA"].to_i,
          dt_ut_dose:  Date.strptime(row["DT_UT_DOSE"], '%d/%m/%Y'),
          mae_vac:  row["MAE_VAC"],
          dt_vac_mae:  Date.strptime(row["DT_VAC_MAE"], '%d/%m/%Y'),
          m_amamenta:  row["M_AMAMENTA"],
          dt_doseuni:  Date.strptime(row["DT_DOSEUNI"], '%d/%m/%Y'),
          dt_1_dose:  Date.strptime(row["DT_1_DOSE"], '%d/%m/%Y'),
          dt_2_dose:  Date.strptime(row["DT_2_DOSE"], '%d/%m/%Y'),
          antiviral:  row["ANTIVIRAL"],
          tp_antivir:  row["TP_ANTIVIR"],
          out_antiv:  row["OUT_ANTIV"],
          dt_antivir:  Date.strptime(row["DT_ANTIVIR"], '%d/%m/%Y'),
          hospital:  row["HOSPITAL"].to_i,
          dt_interna:  Date.strptime(row["DT_INTERNA"], '%d/%m/%Y'),
          sg_uf_inte:  row["SG_UF_INTE"],
          id_rg_inte:  row["ID_RG_INTE"],
          co_rg_inte:  row["CO_RG_INTE"],
          id_mn_inte:  row["ID_MN_INTE"],
          co_mu_inte:  row["CO_MU_INTE"],
          uti:  row["UTI"].to_i,
          dt_entuti:  Date.strptime(row["DT_ENTUTI"], '%d/%m/%Y'),
          dt_saiduti:  Date.strptime(row["DT_SAIDUTI"], '%d/%m/%Y'),
          suport_ven:  row["SUPORT_VEN"].to_i,
          raiox_res:  row["RAIOX_RES"],
          raiox_out:  row["RAIOX_OUT"],
          dt_raiox:  Date.strptime(row["DT_RAIOX"], '%d/%m/%Y'),
          amostra:  row["AMOSTRA"],
          dt_coleta:  Date.strptime(row["DT_COLETA"], '%d/%m/%Y'),
          tp_amostra:  row["TP_AMOSTRA"],
          out_amost:  row["OUT_AMOST"],
          pcr_resul:  row["PCR_RESUL"],
          dt_pcr:  Date.strptime(row["DT_PCR"], '%d/%m/%Y'),
          pos_pcrflu:  row["POS_PCRFLU"],
          tp_flu_pcr:  row["TP_FLU_PCR"],
          pcr_fluasu:  row["PCR_FLUASU"],
          fluasu_out:  row["FLUASU_OUT"],
          pcr_flubli:  row["PCR_FLUBLI"],
          flubli_out:  row["FLUBLI_OUT"],
          pos_pcrout:  row["POS_PCROUT"],
          pcr_vsr:  row["PCR_VSR"],
          pcr_para1:  row["PCR_PARA1"],
          pcr_para2:  row["PCR_PARA2"],
          pcr_para3:  row["PCR_PARA3"],
          pcr_para4:  row["PCR_PARA4"],
          pcr_adeno:  row["PCR_ADENO"],
          pcr_metap:  row["PCR_METAP"],
          pcr_boca:  row["PCR_BOCA"],
          pcr_rino:  row["PCR_RINO"],
          pcr_outro:  row["PCR_OUTRO"],
          ds_pcr_out:  row["DS_PCR_OUT"],
          classi_fin:  row["CLASSI_FIN"].to_i,
          classi_out:  row["CLASSI_OUT"],
          criterio:  row["CRITERIO"],
          evolucao:  row["EVOLUCAO"].to_i,
          dt_evoluca:  Date.strptime(row["DT_EVOLUCA"], '%d/%m/%Y'),
          dt_encerra:  Date.strptime(row["DT_ENCERRA"], '%d/%m/%Y'),
          dt_digita:  Date.strptime(row["DT_DIGITA"], '%d/%m/%Y'),
          histo_vgm:  row["HISTO_VGM"],
          pais_vgm:  row["PAIS_VGM"],
          co_ps_vgm:  row["CO_PS_VGM"],
          lo_ps_vgm:  row["LO_PS_VGM"],
          dt_vgm:  Date.strptime(row["DT_VGM"], '%d/%m/%Y'),
          dt_rt_vgm:  Date.strptime(row["DT_RT_VGM"], '%d/%m/%Y'),
          pcr_sars2:  row["PCR_SARS2"],
          pac_cocbo:  row["PAC_COCBO"],
          pac_dscbo:  row["PAC_DSCBO"],
          out_anim:  row["OUT_ANIM"],
          dor_abd:  row["DOR_ABD"],
          fadiga:  row["FADIGA"],
          perd_olft:  row["PERD_OLFT"],
          perd_pala:  row["PERD_PALA"],
          tomo_res:  row["TOMO_RES"],
          tomo_out:  row["TOMO_OUT"],
          dt_tomo:  Date.strptime(row["DT_TOMO"], '%d/%m/%Y'),
          tp_tes_an:  row["TP_TES_AN"],
          dt_res_an:  Date.strptime(row["DT_RES_AN"], '%d/%m/%Y'),
          res_an:  row["RES_AN"],
          pos_an_flu:  row["POS_AN_FLU"],
          tp_flu_an:  row["TP_FLU_AN"],
          pos_an_out:  row["POS_AN_OUT"],
          an_sars2:  row["AN_SARS2"],
          an_vsr:  row["AN_VSR"],
          an_para1:  row["AN_PARA1"],
          an_para2:  row["AN_PARA2"],
          an_para3:  row["AN_PARA3"],
          an_adeno:  row["AN_ADENO"],
          an_outro:  row["AN_OUTRO"],
          ds_an_out:  row["DS_AN_OUT"],
          tp_am_sor:  row["TP_AM_SOR"],
          sor_out:  row["SOR_OUT"],
          dt_co_sor:  Date.strptime(row["DT_CO_SOR"], '%d/%m/%Y'),
          tp_sor:  row["TP_SOR"],
          out_sor:  row["OUT_SOR"],
          dt_res:  Date.strptime(row["DT_RES"], '%d/%m/%Y'),
          res_igg:  row["RES_IGG"],
          res_igm:  row["RES_IGM"],
          res_iga:  row["RES_IGA"],
          estrang:  row["ESTRANG"],
          vacina_cov:  row["VACINA_COV"].to_i,
          dose_1_cov:  Date.strptime(row["DOSE_1_COV"], '%d/%m/%Y'),
          dose_2_cov:  Date.strptime(row["DOSE_2_COV"], '%d/%m/%Y'),
          dose_ref:  Date.strptime(row["DOSE_REF"], '%d/%m/%Y'),
          fab_cov_1:  row["FAB_COV_1"],
          fab_cov_2:  row["FAB_COV_2"],
          fab_covref:  row["FAB_COVREF"],
          lote_ref:  row["LOTE_REF"],
          lab_pr_cov:  row["LAB_PR_COV"],
          lote_1_cov:  row["LOTE_1_COV"],
          lote_2_cov:  row["LOTE_2_COV"],
          fnt_in_cov:  row["FNT_IN_COV"].to_i,
        }
      end
    ensure
      tmpfile.close
      tmpfile.unlink
    end
  end

private

  def download(srag)
    tmpfile = Tempfile.new("srag-{#{srag.id}}")
    logger.info("Downloading #{srag.url} to '#{tmpfile.path}'")
    src = URI.open(srag.url)
    IO.copy_stream(src, tmpfile)
    return tmpfile
  end

end
